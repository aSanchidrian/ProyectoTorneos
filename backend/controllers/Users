const express = require("express")
const bcrypt = require("bcrypt")
const router = express.Router()
const mysql = require("mysql")
const conection = require("../connection")
const { verifyToken } = require("../utils/handleJwt")
const { tokenSign } = require("../utils/handleJwt")
const { User } = require("../models/models")
const { Op } = require("sequelize");

require("dotenv").config()
db = conection

const createUser = (async (req, res) => {
    const name = req.body.name
    const email = req.body.email
    const nickname = req.body.nickname
    const sport = req.body.sport
    const schedule = req.body.schedule
    const password = req.body.password
    const conf_password = req.body.conf_password

    if (!(email.includes("@u-tad.com") || email.includes("@live.u-tad.com")))
        return res.send("Necesitas un correo corporativo de U-Tad")

    if (password != conf_password)
        return res.send("¡Las contraseñas no coinciden!")

    const hashedPassword = await bcrypt.hash(req.body.password, 10);

    const [user, created] = await User.findOrCreate({ 
        where: { 
            [Op.or]: [ { email: email }, { nickname: nickname } ] 
        },
        defaults: {
            name: name,
            email: email,
            nickname: nickname,
            sport: sport,
            schedule: schedule,
            role: 0,
            password: hashedPassword
        }
    })

    if (!created)
        return res.send("User already registered")

    const token = tokenSign(nickname)
    res.send(`¡User created! token: ${JSON.stringify(token)}`)
})

const login = (async (req, res) => {
    const username = req.body.username
    const password = req.body.password

    var user = await User.findOne({ where: { 
        [Op.or]: [
            { email: username },
            { nickname: username }
        ] 
    }})

    if (user === null) 
        return res.send("User or Password incorrect")
    
    const hashedPassword = user.password
        
    if (!(bcrypt.compare(password, hashedPassword)))
        return res.send("User or Password incorrect")

    const token = tokenSign(user.nickname);
    res.send(`${username} is logged in!, Sesion token: ${token}`)
})

const changeParams = (async (req, res) => {
    const param = req.body.param;
    const valor = req.body.valor;
    const token = req.headers.authorization.split(' ').pop()
    console.log(token)
    
    db.getConnection(async (err, connection) => {
        if (err) throw (err)
        const sqlSearch = "SELECT * FROM Usuario WHERE nickname = ?"
        const dataToken = await verifyToken(token)
        const nickname = dataToken.nickname;
        const sqlUpdate = "Update Usuario SET " + param + "=? WHERE nickname=?"
        const search_query2 = mysql.format(sqlSearch, [valor])
        const search_query = mysql.format(sqlUpdate, [valor, nickname])

        await connection.query(search_query2, async (err, result) => {
            if (err) throw (err)
            console.log("------> Search Results")
            console.log(result.length)

            if (result.length != 0) {
                connection.release()
                console.log("------> User already exists")
                console.log(dataToken.nickname)
                res.sendStatus(409)
            } else {
                await connection.query(search_query, async (err, result) => {
                    connection.release()

                    if (err) throw (err)
                    if (result.length == 0) {
                        console.log("--------> No se puedo actualizar")

                        res.sendStatus(404)
                    } else {
                        console.log("---------> Tus datos se han actualizado")
                        res.send(` Actualizado!`)
                    }
                })
            }
        })
    })
})

module.exports = { createUser, login, changeParams }