const express = require("express");
const { matchedData } = require("express-validator");
const bcrypt = require("bcrypt");
const router = express.Router();
const mysql = require("mysql");
const conection = require("../connection");
const { verifyToken } = require("../utils/handleJwt");
const { tokenSign } = require("../utils/handleJwt");
const { User } = require("../models/models");
const { Op } = require("sequelize");

require("dotenv").config();
db = conection;

const createUser = async (req, res) => {
  let name = req.body.name;
  let email = req.body.email;
  let nickname = req.body.nickname;
  let sport = req.body.sport;
  let schedule = req.body.schedule;
  let password = req.body.password;
  let conf_password = req.body.conf_password;

  if (!(email.includes("@u-tad.com") || email.includes("@live.u-tad.com")))
    return res.send("Necesitas un correo corporativo de U-Tad");

  if (password != conf_password)
    return res.send("¡Las contraseñas no coinciden!");

  let hashedPassword = await bcrypt.hash(req.body.password, 10);

  const [user, created] = await User.findOrCreate({
    where: {
      [Op.or]: [{ email: email }, { nickname: nickname }],
    },
    defaults: {
      name: name,
      email: email,
      nickname: nickname,
      sport: sport,
      schedule: schedule,
      role: 0,
      password: hashedPassword,
    },
  });

  if (!created) return res.send("User already registered");

  const token = await tokenSign(nickname);
  res.send(`¡User created! token: ${JSON.stringify(token)}`);
};

const login = async (req, res) => {
  let username = req.body.username;
  let password = req.body.password;

  const user = await User.findOne({
    where: {
      [Op.or]: [{ email: username }, { nickname: username }],
    },
  });

  if (user === null) return res.send("User or Password incorrect");

  let hashedPassword = user.password;

  if (!bcrypt.compare(password, hashedPassword))
    return res.send("User or Password incorrect");

  const token = await tokenSign(user.nickname);
  res.send(`${username} is logged in!, Sesion token: ${token}`);
};

const deleteUser = async (req, res) => {
  try {
    const { nickname } = matchedData(req);
    var data = "";

    data = await User.destroy({ where: { nickname: nickname } });

    res.send(data);
  } catch (err) {
    console.log(err);
    handleHttpError(res, "ERROR_DELETE_USER");
  }
};

const getUsers = async (req, res) => {
  try {
    var data = "";
    data = await User.findAll();

    res.send(data);
  } catch (err) {
    console.log(err); //Opcional
    //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
    handleHttpError(res, "ERROR_GET_USERS"); //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
  }
};

module.exports = { createUser, login, deleteUser, getUsers };
