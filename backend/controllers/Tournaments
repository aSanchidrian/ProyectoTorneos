const express = require("express");
const { matchedData } = require("express-validator");
const router = express.Router();
const mysql = require("mysql");
const conection = require("../connection");
const { Tournament, TournamentPlayers } = require("../models/models");
const { Op } = require("sequelize");

require("dotenv").config();
db = conection;

const createTournament = async (req, res) => {
    try {
        // Extract data from request body
        const { name, description, sport, date_start, date_end, min_teams, max_teams, max_players_team, rounds, type, privacity } = req.body;

        // Create tournament in database
        const [tournament, created] = await Tournament.findOrCreate({
            where: {
                name,
            },
            defaults: {
                name, description, sport, date_start, date_end, min_teams, max_teams, max_players_team, rounds, type, privacity
            },
        });

        if (!created)
            return res.status(409).json({ message: "Tournament already exists" });

        // Send response with success message
        res.status(201).json({ message: "Tournament created successfully" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Internal server error" });
    }
};

const getTournaments = async (req, res) => {
    try {
        var data = "";
        data = await Tournament.findAll();
        res.send(data);
    } catch (err) {
        console.log(err); //Opcional
        handleHttpError(res, "ERROR_GET_TOURNAMENT"); //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
    }
};

const suscribeTournament = async (req, res) => {
    
};

const getMyTournaments = async (req, res) => {
    try {
        var data = "";
        data = await TournamentPlayers.findAll({
            where: {
                UserId: req.user.id,
            },
        });

        const tourPlayerIds = [];
        for (let i = 0; i < data.length; i++)
            tourPlayerIds.push(data[i].tournamentId);
        
        const relatedRecords = await Tournament.findAll({
            where: {
                id: tourPlayerIds,
            },
        });

        res.send(relatedRecords);
    } catch (err) {
        console.log(err);

        handleHttpError(res, "ERROR_GET_MY_TOURNAMENT");
    }
};

const getTeamsInTournament = async (req, res) => {
    
};


module.exports = { createTournament, getTournaments, suscribeTournament, getMyTournaments };
