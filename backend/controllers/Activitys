const express = require("express")
const { matchedData } = require("express-validator")
const router = express.Router()
const mysql = require("mysql")
const conection = require("../connection")
const { Activity,ActivityPlayer } = require("../models/models")
const { Op } = require("sequelize");

require("dotenv").config()
db = conection

const createActivity = (
  
    async (req, res) => {
      try {
        // Extract data from request body
        const {
          name,
          description,
          sport,
          date,
          privacity,
          max_plazas,
          status,
          result,
          place
        } = req.body;
  
        // Create activity in database
        const [activity, created] = await Activity.findOrCreate({
          where: {
            name,
          },
          defaults: {
            description,
            sport,
            date,
            privacity,
            max_plazas,
            status,
            result,
            place
          },
        });
  
        if (!created) {
          return res.status(409).json({
            message: "Activity already exists",
          });
        }
  
        // Send response with success message
        res.status(201).json({
          message: "Activity created successfully",
        });
      } catch (err) {
        console.error(err);
        res.status(500).json({
          message: "Internal server error",
        });
      }
    }
  );

  const getActivitys = async (req, res) => {
    try {
        var data = ""
          data = await Activity.findAll()
        
        res.send(data)
    } catch (err) {
        console.log(err) //Opcional
        //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
        handleHttpError(res, 'ERROR_GET_ACTIVITY') //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
    }
}

const suscribeActivity = async (req,res)=>{
    let userId = req.body.userId
    let activityId = req.body.activityId
    let permission=req.body.permission;
    
    const [activityPlayer, created] = await ActivityPlayer.findOrCreate({ 
        where: { 
            [Op.or]: [ { userId: userId }, { activityId: activityId },{ permission: permission } ] 
        },
        defaults: {
            userId: userId,
            activityId: activityId,
            permission: permission
        }
    })

    if (!created)
        return res.send("Already susbscribe")

    
    res.send(`SUBSCRIBE TO THE ACTIVITY`)
}
  module.exports = {createActivity,getActivitys,suscribeActivity}