const express = require("express");
const { matchedData } = require("express-validator");
const router = express.Router();
const mysql = require("mysql");
const conection = require("../connection");
const { handleHttpError } = require('../utils/handleError')
const { Activity, ActivityPlayer } = require("../models/models");
const { Op } = require("sequelize");

require("dotenv").config();
db = conection;

const createActivity = async (req, res) => {
  try {
    // Extract data from request body
    const {
      name,
      description,
      sport,
      date,
      privacity,
      max_plazas,
      status,
      result,
      place,
    } = req.body;

    // Create activity in database
    const [activity, created] = await Activity.findOrCreate({
      where: {
        name,
      },
      defaults: {
        description,
        sport,
        date,
        privacity,
        max_plazas,
        status,
        result,
        place,
      },
    });

    if (!created) {
      return res.status(409).json({
        message: "Activity already exists",
      });
    }

    // Send response with success message
    res.status(201).json({
      message: "Activity created successfully",
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({
      message: "Internal server error",
    });
  }
};

const getActivitys = async (req, res) => {
  try {
    var data = "";
    data = await Activity.findAll();

    res.send(data);
  } catch (err) {
    console.log(err); //Opcional
    //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
    handleHttpError(res, "ERROR_GET_ACTIVITY"); //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
  }
};

const suscribeActivity = async (req, res) => {
  //let userId = req.body.userId
  let userId = req.user.id;
  //console.log(req.user);
  let activityId = req.body.activityId;
  let permission = req.body.permission;

  const activityPlayer2 = await ActivityPlayer.findOne({
    where: {
      userId: userId,
      activityId: activityId,
    },
  });

  if (activityPlayer2) {
    // El usuario ya está relacionado con esta actividad
    res.send(`ALREADY SUSBCRIBE`);
  } else {
    // El usuario no está relacionado con esta actividad
    const activityPlayer = await ActivityPlayer.create({
      userId: userId,
      activityId: activityId,
      permission: permission,
    });
    res.send(`SUBSCRIBE TO THE ACTIVITY`);
  }

  //if (!created)
  //return res.send("Already susbscribe")
};

const getMyActivitys = async (req, res) => {
  try {
    var data = "";
    data = await ActivityPlayer.findAll({
      where: {
        UserId: req.user.id,
      },
    });
    const activityPlayerIds = [];
    for (let i = 0; i < data.length; i++) {
      activityPlayerIds.push(data[i].activityId);
    }
    const relatedRecords = await Activity.findAll({
      where: {
        id: activityPlayerIds,
      },
    });

    res.send(relatedRecords);
  } catch (err) {
    console.log(err);

    handleHttpError(res, "ERROR_GET_ACTIVITY");
  }
};


const submitResult = async (req, res) => {
  const { id } = req.params; // get the ID of the activity from the URL parameter
  const { result } = req.body; // get the result data from the request body
  const status=false;
  try {
    // find the activity with the given ID in the database
    const activity = await Activity.findOne({ _id:id});

    if (!activity) {
      // if the activity doesn't exist, return a 404 error
      return res.status(404).json({ message: `Activity with ID ${id} not found.` });
    }

    // update the result for the activity in the database
    await activity.update({ result ,status});

    // return a success message and the updated activity data
    return res.json({ message: `Result submitted for activity ${id}.`, activity });
  } catch (error) {
    // if there's an error, return a 500 error with the error message
    return res.status(500).json({ message: error.message });
  }
};

module.exports = {
  createActivity,
  getActivitys,
  suscribeActivity,
  getMyActivitys,
  submitResult,
};
